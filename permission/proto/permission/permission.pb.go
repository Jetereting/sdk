// Code generated by protoc-gen-go. DO NOT EDIT.
// source: permission.proto

/*
Package permission is a generated protocol buffer package.

It is generated from these files:
	permission.proto

It has these top-level messages:
	LoginWithUserNameRequest
	LoginWithUserIDRequest
	LoginReply
	QueryUserMenusRequest
	QueryUserMenusReply
	VerificationRouterRequest
	VerificationRouterReply
	CreateUserRequest
	CreateUserReply
	UpdateUserRequest
	UpdateUserReply
	ModifyPasswordRequest
	ModifyPasswordReply
*/
package permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 使用用户名和密码登录请求参数
type LoginWithUserNameRequest struct {
	// 用户名
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// 用户密码(明文)
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginWithUserNameRequest) Reset()                    { *m = LoginWithUserNameRequest{} }
func (m *LoginWithUserNameRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginWithUserNameRequest) ProtoMessage()               {}
func (*LoginWithUserNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginWithUserNameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginWithUserNameRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 使用用户ID和密码登录请求参数
type LoginWithUserIDRequest struct {
	// 用户名
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 用户密码(明文)
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginWithUserIDRequest) Reset()                    { *m = LoginWithUserIDRequest{} }
func (m *LoginWithUserIDRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginWithUserIDRequest) ProtoMessage()               {}
func (*LoginWithUserIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginWithUserIDRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LoginWithUserIDRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 用户登录之后的响应参数
type LoginReply struct {
	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 用户名
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// 真实姓名
	Realname string `protobuf:"bytes,3,opt,name=realname" json:"realname,omitempty"`
	// 机构编号
	OrgCode string `protobuf:"bytes,4,opt,name=org_code,json=orgCode" json:"org_code,omitempty"`
	// 用户类型编号
	TypeCode string `protobuf:"bytes,5,opt,name=type_code,json=typeCode" json:"type_code,omitempty"`
	// 用户状态(0:停用 1:启用)
	Status int32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginReply) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LoginReply) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReply) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *LoginReply) GetOrgCode() string {
	if m != nil {
		return m.OrgCode
	}
	return ""
}

func (m *LoginReply) GetTypeCode() string {
	if m != nil {
		return m.TypeCode
	}
	return ""
}

func (m *LoginReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 查询用户的功能菜单请求参数
type QueryUserMenusRequest struct {
	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 系统编码
	SystemCodes []string `protobuf:"bytes,2,rep,name=system_codes,json=systemCodes" json:"system_codes,omitempty"`
}

func (m *QueryUserMenusRequest) Reset()                    { *m = QueryUserMenusRequest{} }
func (m *QueryUserMenusRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryUserMenusRequest) ProtoMessage()               {}
func (*QueryUserMenusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryUserMenusRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *QueryUserMenusRequest) GetSystemCodes() []string {
	if m != nil {
		return m.SystemCodes
	}
	return nil
}

// 查询用户的功能菜单响应参数
type QueryUserMenusReply struct {
	Results []*QueryUserMenusReply_FuncMenu `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *QueryUserMenusReply) Reset()                    { *m = QueryUserMenusReply{} }
func (m *QueryUserMenusReply) String() string            { return proto.CompactTextString(m) }
func (*QueryUserMenusReply) ProtoMessage()               {}
func (*QueryUserMenusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryUserMenusReply) GetResults() []*QueryUserMenusReply_FuncMenu {
	if m != nil {
		return m.Results
	}
	return nil
}

// 动作
type QueryUserMenusReply_Action struct {
	// 编号
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *QueryUserMenusReply_Action) Reset()                    { *m = QueryUserMenusReply_Action{} }
func (m *QueryUserMenusReply_Action) String() string            { return proto.CompactTextString(m) }
func (*QueryUserMenusReply_Action) ProtoMessage()               {}
func (*QueryUserMenusReply_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *QueryUserMenusReply_Action) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *QueryUserMenusReply_Action) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 功能菜单
type QueryUserMenusReply_FuncMenu struct {
	// 编号
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 路由类型(1内部跳转 2外部跳转)
	RouterType int32 `protobuf:"varint,3,opt,name=router_type,json=routerType" json:"router_type,omitempty"`
	// 跳转路由
	Router string `protobuf:"bytes,4,opt,name=router" json:"router,omitempty"`
	// 分级码
	LevelCode string `protobuf:"bytes,5,opt,name=level_code,json=levelCode" json:"level_code,omitempty"`
	// 菜单图标
	Icon string `protobuf:"bytes,6,opt,name=icon" json:"icon,omitempty"`
	// 菜单动作
	Actions []*QueryUserMenusReply_Action `protobuf:"bytes,7,rep,name=actions" json:"actions,omitempty"`
	// 子级菜单
	Children []*QueryUserMenusReply_FuncMenu `protobuf:"bytes,8,rep,name=children" json:"children,omitempty"`
}

func (m *QueryUserMenusReply_FuncMenu) Reset()                    { *m = QueryUserMenusReply_FuncMenu{} }
func (m *QueryUserMenusReply_FuncMenu) String() string            { return proto.CompactTextString(m) }
func (*QueryUserMenusReply_FuncMenu) ProtoMessage()               {}
func (*QueryUserMenusReply_FuncMenu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func (m *QueryUserMenusReply_FuncMenu) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *QueryUserMenusReply_FuncMenu) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryUserMenusReply_FuncMenu) GetRouterType() int32 {
	if m != nil {
		return m.RouterType
	}
	return 0
}

func (m *QueryUserMenusReply_FuncMenu) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryUserMenusReply_FuncMenu) GetLevelCode() string {
	if m != nil {
		return m.LevelCode
	}
	return ""
}

func (m *QueryUserMenusReply_FuncMenu) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *QueryUserMenusReply_FuncMenu) GetActions() []*QueryUserMenusReply_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *QueryUserMenusReply_FuncMenu) GetChildren() []*QueryUserMenusReply_FuncMenu {
	if m != nil {
		return m.Children
	}
	return nil
}

// 验证路由权限请求参数
type VerificationRouterRequest struct {
	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 资源所属的系统编号
	SystemCode string `protobuf:"bytes,2,opt,name=system_code,json=systemCode" json:"system_code,omitempty"`
	// 路由
	Router string `protobuf:"bytes,3,opt,name=router" json:"router,omitempty"`
	// 请求方法
	Method string `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
}

func (m *VerificationRouterRequest) Reset()                    { *m = VerificationRouterRequest{} }
func (m *VerificationRouterRequest) String() string            { return proto.CompactTextString(m) }
func (*VerificationRouterRequest) ProtoMessage()               {}
func (*VerificationRouterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerificationRouterRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *VerificationRouterRequest) GetSystemCode() string {
	if m != nil {
		return m.SystemCode
	}
	return ""
}

func (m *VerificationRouterRequest) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *VerificationRouterRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// 验证路由权限响应参数
type VerificationRouterReply struct {
	// 是否允许
	IsAllow bool `protobuf:"varint,1,opt,name=is_allow,json=isAllow" json:"is_allow,omitempty"`
}

func (m *VerificationRouterReply) Reset()                    { *m = VerificationRouterReply{} }
func (m *VerificationRouterReply) String() string            { return proto.CompactTextString(m) }
func (*VerificationRouterReply) ProtoMessage()               {}
func (*VerificationRouterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VerificationRouterReply) GetIsAllow() bool {
	if m != nil {
		return m.IsAllow
	}
	return false
}

// 创建用户请求参数
type CreateUserRequest struct {
	// 登录账号
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// 登录密码
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// 真实姓名
	RealName string `protobuf:"bytes,3,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	// 用户类型编号
	TypeCode string `protobuf:"bytes,4,opt,name=type_code,json=typeCode" json:"type_code,omitempty"`
	// 机构编号
	OrgCode string `protobuf:"bytes,5,opt,name=org_code,json=orgCode" json:"org_code,omitempty"`
	// 角色编号
	RoleCodes []string `protobuf:"bytes,6,rep,name=role_codes,json=roleCodes" json:"role_codes,omitempty"`
	// 用户组编号
	GroupCodes []string `protobuf:"bytes,7,rep,name=group_codes,json=groupCodes" json:"group_codes,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateUserRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserRequest) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *CreateUserRequest) GetTypeCode() string {
	if m != nil {
		return m.TypeCode
	}
	return ""
}

func (m *CreateUserRequest) GetOrgCode() string {
	if m != nil {
		return m.OrgCode
	}
	return ""
}

func (m *CreateUserRequest) GetRoleCodes() []string {
	if m != nil {
		return m.RoleCodes
	}
	return nil
}

func (m *CreateUserRequest) GetGroupCodes() []string {
	if m != nil {
		return m.GroupCodes
	}
	return nil
}

// 创建用户响应参数
type CreateUserReply struct {
	// 是否成功
	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess" json:"is_success,omitempty"`
	// 错误代码(9002 用户名已经存在,9004 机构编号不存在)
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// 用户ID
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateUserReply) Reset()                    { *m = CreateUserReply{} }
func (m *CreateUserReply) String() string            { return proto.CompactTextString(m) }
func (*CreateUserReply) ProtoMessage()               {}
func (*CreateUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateUserReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *CreateUserReply) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *CreateUserReply) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// 更新用户请求参数
type UpdateUserRequest struct {
	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 登录账号
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// 真实姓名
	RealName string `protobuf:"bytes,3,opt,name=real_name,json=realName" json:"real_name,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateUserRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateUserRequest) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

// 更新用户请求参数
type UpdateUserReply struct {
	// 是否成功
	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess" json:"is_success,omitempty"`
	// 错误代码(9001 用户不存在,9002 用户名已经存在)
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *UpdateUserReply) Reset()                    { *m = UpdateUserReply{} }
func (m *UpdateUserReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserReply) ProtoMessage()               {}
func (*UpdateUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateUserReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *UpdateUserReply) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

// 修改密码请求参数
type ModifyPasswordRequest struct {
	// 用户ID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// 原始密码
	OldPassword string `protobuf:"bytes,2,opt,name=old_password,json=oldPassword" json:"old_password,omitempty"`
	// 新密码
	NewPassword string `protobuf:"bytes,3,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
}

func (m *ModifyPasswordRequest) Reset()                    { *m = ModifyPasswordRequest{} }
func (m *ModifyPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyPasswordRequest) ProtoMessage()               {}
func (*ModifyPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ModifyPasswordRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ModifyPasswordRequest) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *ModifyPasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

// 修改密码响应参数
type ModifyPasswordReply struct {
	// 是否成功
	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess" json:"is_success,omitempty"`
	// 错误代码(9001 用户不存在,9003 原始密码不正确)
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *ModifyPasswordReply) Reset()                    { *m = ModifyPasswordReply{} }
func (m *ModifyPasswordReply) String() string            { return proto.CompactTextString(m) }
func (*ModifyPasswordReply) ProtoMessage()               {}
func (*ModifyPasswordReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ModifyPasswordReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *ModifyPasswordReply) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginWithUserNameRequest)(nil), "permission.LoginWithUserNameRequest")
	proto.RegisterType((*LoginWithUserIDRequest)(nil), "permission.LoginWithUserIDRequest")
	proto.RegisterType((*LoginReply)(nil), "permission.LoginReply")
	proto.RegisterType((*QueryUserMenusRequest)(nil), "permission.QueryUserMenusRequest")
	proto.RegisterType((*QueryUserMenusReply)(nil), "permission.QueryUserMenusReply")
	proto.RegisterType((*QueryUserMenusReply_Action)(nil), "permission.QueryUserMenusReply.Action")
	proto.RegisterType((*QueryUserMenusReply_FuncMenu)(nil), "permission.QueryUserMenusReply.FuncMenu")
	proto.RegisterType((*VerificationRouterRequest)(nil), "permission.VerificationRouterRequest")
	proto.RegisterType((*VerificationRouterReply)(nil), "permission.VerificationRouterReply")
	proto.RegisterType((*CreateUserRequest)(nil), "permission.CreateUserRequest")
	proto.RegisterType((*CreateUserReply)(nil), "permission.CreateUserReply")
	proto.RegisterType((*UpdateUserRequest)(nil), "permission.UpdateUserRequest")
	proto.RegisterType((*UpdateUserReply)(nil), "permission.UpdateUserReply")
	proto.RegisterType((*ModifyPasswordRequest)(nil), "permission.ModifyPasswordRequest")
	proto.RegisterType((*ModifyPasswordReply)(nil), "permission.ModifyPasswordReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Permission service

type PermissionClient interface {
	// 使用用户名和密码登录
	LoginWithUserName(ctx context.Context, in *LoginWithUserNameRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 使用用户ID和密码登录
	LoginWithUserID(ctx context.Context, in *LoginWithUserIDRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 查询用户的功能菜单
	QueryUserMenus(ctx context.Context, in *QueryUserMenusRequest, opts ...grpc.CallOption) (*QueryUserMenusReply, error)
	// 验证路由权限
	VerificationRouter(ctx context.Context, in *VerificationRouterRequest, opts ...grpc.CallOption) (*VerificationRouterReply, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	// 更新用户
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error)
	// 修改密码
	ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...grpc.CallOption) (*ModifyPasswordReply, error)
}

type permissionClient struct {
	cc *grpc.ClientConn
}

func NewPermissionClient(cc *grpc.ClientConn) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) LoginWithUserName(ctx context.Context, in *LoginWithUserNameRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/permission.Permission/LoginWithUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) LoginWithUserID(ctx context.Context, in *LoginWithUserIDRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/permission.Permission/LoginWithUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) QueryUserMenus(ctx context.Context, in *QueryUserMenusRequest, opts ...grpc.CallOption) (*QueryUserMenusReply, error) {
	out := new(QueryUserMenusReply)
	err := grpc.Invoke(ctx, "/permission.Permission/QueryUserMenus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) VerificationRouter(ctx context.Context, in *VerificationRouterRequest, opts ...grpc.CallOption) (*VerificationRouterReply, error) {
	out := new(VerificationRouterReply)
	err := grpc.Invoke(ctx, "/permission.Permission/VerificationRouter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := grpc.Invoke(ctx, "/permission.Permission/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := grpc.Invoke(ctx, "/permission.Permission/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...grpc.CallOption) (*ModifyPasswordReply, error) {
	out := new(ModifyPasswordReply)
	err := grpc.Invoke(ctx, "/permission.Permission/ModifyPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permission service

type PermissionServer interface {
	// 使用用户名和密码登录
	LoginWithUserName(context.Context, *LoginWithUserNameRequest) (*LoginReply, error)
	// 使用用户ID和密码登录
	LoginWithUserID(context.Context, *LoginWithUserIDRequest) (*LoginReply, error)
	// 查询用户的功能菜单
	QueryUserMenus(context.Context, *QueryUserMenusRequest) (*QueryUserMenusReply, error)
	// 验证路由权限
	VerificationRouter(context.Context, *VerificationRouterRequest) (*VerificationRouterReply, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	// 更新用户
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	// 修改密码
	ModifyPassword(context.Context, *ModifyPasswordRequest) (*ModifyPasswordReply, error)
}

func RegisterPermissionServer(s *grpc.Server, srv PermissionServer) {
	s.RegisterService(&_Permission_serviceDesc, srv)
}

func _Permission_LoginWithUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).LoginWithUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/LoginWithUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).LoginWithUserName(ctx, req.(*LoginWithUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_LoginWithUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).LoginWithUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/LoginWithUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).LoginWithUserID(ctx, req.(*LoginWithUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_QueryUserMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).QueryUserMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/QueryUserMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).QueryUserMenus(ctx, req.(*QueryUserMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_VerificationRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).VerificationRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/VerificationRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).VerificationRouter(ctx, req.(*VerificationRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.Permission/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ModifyPassword(ctx, req.(*ModifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Permission_serviceDesc = grpc.ServiceDesc{
	ServiceName: "permission.Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWithUserName",
			Handler:    _Permission_LoginWithUserName_Handler,
		},
		{
			MethodName: "LoginWithUserID",
			Handler:    _Permission_LoginWithUserID_Handler,
		},
		{
			MethodName: "QueryUserMenus",
			Handler:    _Permission_QueryUserMenus_Handler,
		},
		{
			MethodName: "VerificationRouter",
			Handler:    _Permission_VerificationRouter_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Permission_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Permission_UpdateUser_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _Permission_ModifyPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission.proto",
}

func init() { proto.RegisterFile("permission.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdb, 0x4e, 0xdb, 0x4c,
	0x10, 0x26, 0xe7, 0x78, 0xf2, 0xeb, 0xa7, 0x2c, 0x22, 0x98, 0xa0, 0x88, 0xb0, 0x3d, 0x28, 0x57,
	0xa8, 0xa2, 0x7d, 0x80, 0x52, 0x50, 0x25, 0xaa, 0x72, 0xa8, 0x53, 0xe8, 0x65, 0x64, 0xec, 0x25,
	0x59, 0xc9, 0xf1, 0xba, 0xbb, 0x36, 0x51, 0x1e, 0xa0, 0xaf, 0xd2, 0xbb, 0xde, 0xf5, 0x79, 0x2a,
	0xf5, 0x4d, 0xaa, 0xdd, 0xb5, 0x13, 0xdb, 0x39, 0x51, 0x71, 0xe7, 0x99, 0xd9, 0xf9, 0x76, 0xe6,
	0x9b, 0xc3, 0x1a, 0x9e, 0x05, 0x84, 0x8f, 0xa8, 0x10, 0x94, 0xf9, 0x47, 0x01, 0x67, 0x21, 0x43,
	0x30, 0xd3, 0x60, 0x0b, 0xcc, 0x4f, 0x6c, 0x40, 0xfd, 0xaf, 0x34, 0x1c, 0xde, 0x08, 0xc2, 0x2f,
	0xed, 0x11, 0xb1, 0xc8, 0xb7, 0x88, 0x88, 0x10, 0xb5, 0xa0, 0x1e, 0x09, 0xc2, 0x7d, 0x7b, 0x44,
	0xcc, 0x42, 0xa7, 0xd0, 0x35, 0xac, 0xa9, 0x2c, 0x6d, 0x81, 0x2d, 0xc4, 0x98, 0x71, 0xd7, 0x2c,
	0x6a, 0x5b, 0x22, 0xe3, 0x0b, 0x68, 0x66, 0x30, 0xcf, 0xcf, 0x12, 0xc4, 0x5d, 0xa8, 0x49, 0x84,
	0x3e, 0x75, 0x63, 0xc0, 0xaa, 0x14, 0xcf, 0xdd, 0x95, 0x70, 0x3f, 0x0b, 0x00, 0x0a, 0xcf, 0x22,
	0x81, 0x37, 0x59, 0x89, 0x31, 0x0d, 0xb7, 0x38, 0x1f, 0x2e, 0x27, 0xb6, 0xa7, 0x6c, 0x25, 0x6d,
	0x4b, 0x64, 0xb4, 0x07, 0x75, 0xc6, 0x07, 0x7d, 0x87, 0xb9, 0xc4, 0x2c, 0x2b, 0x5b, 0x8d, 0xf1,
	0xc1, 0x29, 0x73, 0x09, 0xda, 0x07, 0x23, 0x9c, 0x04, 0x44, 0xdb, 0x2a, 0xda, 0x4f, 0x2a, 0x94,
	0xb1, 0x09, 0x55, 0x11, 0xda, 0x61, 0x24, 0xcc, 0x6a, 0xa7, 0xd0, 0xad, 0x58, 0xb1, 0x84, 0x7b,
	0xb0, 0xf3, 0x39, 0x22, 0x7c, 0x22, 0x53, 0xbf, 0x20, 0x7e, 0x24, 0xd6, 0x66, 0x7f, 0x08, 0xff,
	0x89, 0x89, 0x08, 0xc9, 0x48, 0x5d, 0x24, 0xcc, 0x62, 0xa7, 0xd4, 0x35, 0xac, 0x86, 0xd6, 0xc9,
	0xbb, 0x04, 0xfe, 0x55, 0x82, 0xed, 0x3c, 0xaa, 0x64, 0xe3, 0x3d, 0xd4, 0x38, 0x11, 0x91, 0x17,
	0x0a, 0xb3, 0xd0, 0x29, 0x75, 0x1b, 0xc7, 0xdd, 0xa3, 0x54, 0xbd, 0x17, 0x78, 0x1c, 0x7d, 0x88,
	0x7c, 0x47, 0x8a, 0x56, 0xe2, 0xd8, 0x7a, 0x0d, 0xd5, 0x13, 0x27, 0xa4, 0xcc, 0x47, 0x08, 0xca,
	0x2a, 0x55, 0x1d, 0x9e, 0xfa, 0x96, 0xba, 0x14, 0xa5, 0xea, 0xbb, 0xf5, 0xa3, 0x08, 0xf5, 0x04,
	0xe7, 0xb1, 0x4e, 0xe8, 0x00, 0x1a, 0x9c, 0x45, 0x21, 0xe1, 0x7d, 0x49, 0xa1, 0x2a, 0x43, 0xc5,
	0x02, 0xad, 0xfa, 0x32, 0x09, 0x14, 0xa1, 0x5a, 0x8a, 0xcb, 0x10, 0x4b, 0xa8, 0x0d, 0xe0, 0x91,
	0x07, 0xe2, 0xa5, 0xcb, 0x60, 0x28, 0xcd, 0x69, 0x7c, 0x17, 0x75, 0x98, 0xaf, 0xaa, 0x60, 0x58,
	0xea, 0x1b, 0xbd, 0x83, 0x9a, 0xad, 0x52, 0x12, 0x66, 0x4d, 0xd1, 0xf2, 0x6a, 0x1d, 0x2d, 0x9a,
	0x01, 0x2b, 0x71, 0x43, 0x67, 0x50, 0x77, 0x86, 0xd4, 0x73, 0x39, 0xf1, 0xcd, 0xfa, 0x3f, 0x32,
	0x3b, 0xf5, 0xc4, 0xdf, 0x0b, 0xb0, 0x77, 0x4b, 0x38, 0xbd, 0xa7, 0x8e, 0xad, 0xf0, 0x55, 0x46,
	0x6b, 0x1b, 0xe2, 0x00, 0x1a, 0xa9, 0x86, 0x88, 0x59, 0x84, 0x59, 0x3f, 0xa4, 0xa8, 0x2a, 0x65,
	0xa8, 0x6a, 0x42, 0x75, 0x44, 0xc2, 0x21, 0x73, 0x13, 0x0a, 0xb5, 0x84, 0xdf, 0xc2, 0xee, 0xa2,
	0x30, 0x64, 0x07, 0xed, 0x41, 0x9d, 0x8a, 0xbe, 0xed, 0x79, 0x6c, 0xac, 0xa2, 0xa8, 0x5b, 0x35,
	0x2a, 0x4e, 0xa4, 0x88, 0xff, 0x14, 0x60, 0xeb, 0x94, 0x13, 0x3b, 0x24, 0x32, 0xd3, 0x24, 0xea,
	0x7d, 0x30, 0x54, 0xd4, 0xf9, 0xbd, 0x70, 0xb9, 0x66, 0x2f, 0x48, 0x47, 0x39, 0x74, 0xfd, 0xfc,
	0x14, 0x2a, 0xc7, 0xcc, 0xa8, 0x95, 0x73, 0xa3, 0x96, 0x1e, 0xd1, 0x4a, 0x76, 0x44, 0xdb, 0x00,
	0x9c, 0x79, 0x24, 0x9e, 0x9c, 0xaa, 0x9a, 0x1c, 0x43, 0x6a, 0xd4, 0xdc, 0x48, 0x26, 0x07, 0x9c,
	0x45, 0x41, 0x6c, 0xaf, 0x29, 0x3b, 0x28, 0x95, 0x1e, 0xac, 0x21, 0x6c, 0xa6, 0x53, 0x94, 0x8c,
	0xb4, 0x01, 0xa8, 0xe8, 0x8b, 0xc8, 0x71, 0x88, 0x10, 0x31, 0x27, 0x06, 0x15, 0x3d, 0xad, 0x90,
	0x66, 0xc2, 0x39, 0xe3, 0xe9, 0xda, 0x18, 0x4a, 0xa3, 0x02, 0x4a, 0x15, 0xb5, 0x94, 0x2e, 0x2a,
	0xbe, 0x87, 0xad, 0x9b, 0xc0, 0xcd, 0x91, 0xb9, 0xb4, 0x05, 0x32, 0x2c, 0x17, 0x73, 0x2c, 0xaf,
	0x62, 0x12, 0x5f, 0xc1, 0x66, 0xfa, 0x9e, 0x27, 0x67, 0x84, 0x1f, 0x60, 0xe7, 0x82, 0xb9, 0xf4,
	0x7e, 0x72, 0x1d, 0x57, 0xf2, 0x31, 0x0b, 0x8d, 0x79, 0x6e, 0x3f, 0xd7, 0x09, 0x0d, 0xe6, 0xb9,
	0x09, 0x84, 0x3c, 0xe2, 0x93, 0xf1, 0xec, 0x88, 0xce, 0xa2, 0xe1, 0x93, 0x71, 0x72, 0x04, 0xf7,
	0x60, 0x3b, 0x7f, 0xef, 0x93, 0x93, 0x39, 0xfe, 0x5d, 0x06, 0xb8, 0x9e, 0xce, 0x31, 0xea, 0xc1,
	0xd6, 0xdc, 0xfb, 0x87, 0x5e, 0xa4, 0x27, 0x7d, 0xd9, 0xf3, 0xd8, 0x6a, 0xce, 0x9d, 0x52, 0xf1,
	0xe1, 0x0d, 0x74, 0x05, 0x9b, 0xb9, 0x07, 0x10, 0xe1, 0xa5, 0x90, 0xd3, 0xd7, 0x71, 0x05, 0xe0,
	0x2d, 0xfc, 0x9f, 0x5d, 0x38, 0xe8, 0x70, 0xd5, 0x32, 0xd2, 0x70, 0x07, 0x6b, 0xf6, 0x15, 0xde,
	0x40, 0x77, 0x80, 0xe6, 0xd7, 0x02, 0x7a, 0x99, 0x76, 0x5c, 0xba, 0xbd, 0x5a, 0xcf, 0xd7, 0x1d,
	0xd3, 0x77, 0x7c, 0x04, 0x98, 0x0d, 0x18, 0x6a, 0xa7, 0x9d, 0xe6, 0x76, 0x4b, 0x6b, 0x7f, 0x99,
	0x79, 0x8a, 0x35, 0x6b, 0xed, 0x2c, 0xd6, 0xdc, 0x68, 0x65, 0xb1, 0x72, 0x13, 0xa1, 0x39, 0xcd,
	0x76, 0x57, 0x96, 0xd3, 0x85, 0x1d, 0x9f, 0xe5, 0x74, 0x41, 0x73, 0xe2, 0x8d, 0xbb, 0xaa, 0xfa,
	0xc9, 0x7a, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x8c, 0xf2, 0xa3, 0x78, 0x09, 0x00, 0x00,
}
